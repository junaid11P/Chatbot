import { EmailOTPOptions } from '../types';
import { AuthActionErrorState, AuthActionLoadingState, AuthActionSuccessState, SessionActionHandlerResult } from './types';

export interface SignInEmailOTPHandlerResult extends AuthActionErrorState, AuthActionSuccessState {
    /**
     * Returns true when the one-time password has been sent via email, and the user needs to send it back to complete sign-in.
     */
    needsOtp: boolean;
}
export interface SignInEmailOTPState extends SignInEmailOTPHandlerResult, AuthActionLoadingState {
}
export interface VerifyEmailOTPHandlerResult extends SessionActionHandlerResult {
}
export declare const signInEmailOTPPromise: (interpreter: import('xstate').Interpreter<import('../machines').AuthContext, any, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('../types').SignUpOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, {
    value: any;
    context: import('../machines').AuthContext;
}, import('xstate').ResolveTypegenMeta<import('../machines/authentication/machine.typegen').Typegen0, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('../types').SignUpOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, import('xstate').BaseActionObject, {
    signInPassword: {
        data: import('../types').SignInResponse;
    };
    passwordlessSms: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessSmsResponse;
    };
    passwordlessSmsOtp: {
        data: import('../types').NhostSessionResponse;
    };
    signInEmailOTP: {
        data: import('../types').SignInEmailOTPResponse;
    };
    verifyEmailOTP: {
        data: import('../types').NhostSessionResponse;
    };
    passwordlessEmail: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessEmailResponse;
    };
    signInAnonymous: {
        data: import('../types').NhostSessionResponse;
    };
    signInPAT: {
        data: import('../types').NhostSessionResponse;
    };
    signInIdToken: {
        data: import('../types').SignInResponse;
    };
    signInMfaTotp: {
        data: import('../types').NhostSessionResponse;
    };
    signInSecurityKeyEmail: {
        data: import('../types').SignInResponse;
    };
    signInSecurityKey: {
        data: import('../types').SignInResponse;
    };
    refreshToken: {
        data: import('../types').NhostSessionResponse;
    };
    signout: {
        data: import('../types').SignOutResponse;
    };
    signUpEmailPassword: {
        data: import('../types').NhostSessionResponse;
    };
    signUpSecurityKey: {
        data: import('../types').NhostSessionResponse;
    };
    importRefreshToken: {
        data: import('../types').NhostSessionResponse;
    };
}>>, email: string, options?: EmailOTPOptions) => Promise<SignInEmailOTPHandlerResult>;
export declare const verifyEmailOTPPromise: (interpreter: import('xstate').Interpreter<import('../machines').AuthContext, any, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('../types').SignUpOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, {
    value: any;
    context: import('../machines').AuthContext;
}, import('xstate').ResolveTypegenMeta<import('../machines/authentication/machine.typegen').Typegen0, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('../types').SignUpOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('../types').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, import('xstate').BaseActionObject, {
    signInPassword: {
        data: import('../types').SignInResponse;
    };
    passwordlessSms: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessSmsResponse;
    };
    passwordlessSmsOtp: {
        data: import('../types').NhostSessionResponse;
    };
    signInEmailOTP: {
        data: import('../types').SignInEmailOTPResponse;
    };
    verifyEmailOTP: {
        data: import('../types').NhostSessionResponse;
    };
    passwordlessEmail: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessEmailResponse;
    };
    signInAnonymous: {
        data: import('../types').NhostSessionResponse;
    };
    signInPAT: {
        data: import('../types').NhostSessionResponse;
    };
    signInIdToken: {
        data: import('../types').SignInResponse;
    };
    signInMfaTotp: {
        data: import('../types').NhostSessionResponse;
    };
    signInSecurityKeyEmail: {
        data: import('../types').SignInResponse;
    };
    signInSecurityKey: {
        data: import('../types').SignInResponse;
    };
    refreshToken: {
        data: import('../types').NhostSessionResponse;
    };
    signout: {
        data: import('../types').SignOutResponse;
    };
    signUpEmailPassword: {
        data: import('../types').NhostSessionResponse;
    };
    signUpSecurityKey: {
        data: import('../types').NhostSessionResponse;
    };
    importRefreshToken: {
        data: import('../types').NhostSessionResponse;
    };
}>>, email: string, otp: string) => Promise<VerifyEmailOTPHandlerResult>;
//# sourceMappingURL=signInEmailOTP.d.ts.map