import { AuthActionLoadingState, NeedsEmailVerificationState, SessionActionHandlerResult } from './types';

export interface SignInSecurityKeyHandlerResult extends SessionActionHandlerResult, NeedsEmailVerificationState {
}
export interface SignInSecurityKeyState extends SignInSecurityKeyHandlerResult, AuthActionLoadingState {
}
export declare const signInSecurityKeyPromise: (interpreter: import('xstate').Interpreter<import('../machines').AuthContext, any, {
    type: "SESSION_UPDATE";
    data: {
        session: import('..').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('..').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('..').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: import('..').EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('..').SignUpOptions | undefined;
    requestOptions?: import('..').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('..').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('..').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, {
    value: any;
    context: import('../machines').AuthContext;
}, import('xstate').ResolveTypegenMeta<import('../machines/authentication/machine.typegen').Typegen0, {
    type: "SESSION_UPDATE";
    data: {
        session: import('..').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_SECURITY_KEY";
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('..').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('..').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNIN_EMAIL_OTP";
    email: string;
    options?: import('..').EmailOTPOptions | undefined;
} | {
    type: "VERIFY_EMAIL_OTP";
    email: string;
    otp: string;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: import('..').SignUpOptions | undefined;
    requestOptions?: import('..').RequestOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('..').SignUpSecurityKeyOptions | undefined;
    requestOptions?: import('..').RequestOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
} | {
    type: "SIGNIN_ID_TOKEN";
    provider: string;
    idToken: string;
    nonce?: string | undefined;
}, import('xstate').BaseActionObject, {
    signInPassword: {
        data: import('..').SignInResponse;
    };
    passwordlessSms: {
        data: import('..').DeanonymizeResponse | import('..').PasswordlessSmsResponse;
    };
    passwordlessSmsOtp: {
        data: import('..').NhostSessionResponse;
    };
    signInEmailOTP: {
        data: import('..').SignInEmailOTPResponse;
    };
    verifyEmailOTP: {
        data: import('..').NhostSessionResponse;
    };
    passwordlessEmail: {
        data: import('..').DeanonymizeResponse | import('..').PasswordlessEmailResponse;
    };
    signInAnonymous: {
        data: import('..').NhostSessionResponse;
    };
    signInPAT: {
        data: import('..').NhostSessionResponse;
    };
    signInIdToken: {
        data: import('..').SignInResponse;
    };
    signInMfaTotp: {
        data: import('..').NhostSessionResponse;
    };
    signInSecurityKeyEmail: {
        data: import('..').SignInResponse;
    };
    signInSecurityKey: {
        data: import('..').SignInResponse;
    };
    refreshToken: {
        data: import('..').NhostSessionResponse;
    };
    signout: {
        data: import('..').SignOutResponse;
    };
    signUpEmailPassword: {
        data: import('..').NhostSessionResponse;
    };
    signUpSecurityKey: {
        data: import('..').NhostSessionResponse;
    };
    importRefreshToken: {
        data: import('..').NhostSessionResponse;
    };
}>>) => Promise<SignInSecurityKeyHandlerResult>;
//# sourceMappingURL=signInSecurityKey.d.ts.map