{"version":3,"file":"index.esm.js","sources":["../src/client.ts","../src/provider.tsx","../src/useAuthInterpreter.ts","../src/useAuthenticationStatus.ts","../src/components/SignedIn.tsx","../src/components/SignedOut.tsx","../src/useAccessToken.ts","../src/useNhostClient.ts","../src/useAddSecurityKey.ts","../src/useAuthenticated.ts","../src/useChangeEmail.ts","../src/useChangePassword.ts","../src/useConfigMfa.ts","../src/useDecodedAccessToken.ts","../src/useFileUpload.ts","../src/useHasuraClaims.ts","../src/useHasuraClaim.ts","../src/useMultipleFilesUpload.ts","../src/useProviderLink.ts","../src/useResetPassword.ts","../src/useSendVerificationEmail.ts","../src/useSignInAnonymous.ts","../src/useSignInEmailPassword.ts","../src/useSignInEmailPasswordless.ts","../src/useSignInEmailSecurityKey.ts","../src/useUserData.ts","../src/useElevateSecurityKeyEmail.ts","../src/useSignInPAT.ts","../src/useSignInSmsPasswordless.ts","../src/useSignOut.ts","../src/useSignUpEmailPassword.ts","../src/useSignUpEmailSecurityKey.ts","../src/useUserAvatarUrl.ts","../src/useUserDefaultRole.ts","../src/useUserDisplayName.ts","../src/useUserEmail.ts","../src/useUserId.ts","../src/useUserIsAnonymous.ts","../src/useUserLocale.ts","../src/useUserRoles.ts","../src/useSignInEmailOTP.ts","../src/useSignInIdToken.ts","../src/useLinkIdToken.ts","../src/useSignInSecurityKey.ts"],"sourcesContent":["import {\n  NhostClient as _VanillaNhostClient,\n  NhostClientConstructorParams as VanillaNhostClientConstructorParams\n} from '@nhost/nhost-js'\n\n/** @internal */\nexport const VanillaNhostClient = _VanillaNhostClient\n\nexport interface NhostReactClientConstructorParams\n  extends Omit<VanillaNhostClientConstructorParams, 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaNhostClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n\n// * Required for @nhost/nextjs\nexport { NHOST_REFRESH_TOKEN_KEY } from '@nhost/nhost-js'\nexport type { AuthMachine, NhostAuthConstructorParams } from '@nhost/nhost-js'\n","import { NhostSession } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\nimport { NhostClient } from './client'\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostProvider: React.FC<PropsWithChildren<NhostProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const interpreter = useInterpret(nhost.auth.client.machine, { devTools: nhost.devTools })\n\n  nhost.auth.client.start({ interpreter, initialSession: initial, devTools: nhost.devTools })\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n\n/**\n * @deprecated use `NhostProvider` instead\n */\nexport const NhostReactProvider = NhostProvider\n","import { AuthMachine } from '@nhost/nhost-js'\nimport { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter)\n    throw Error('Could not find the Nhost auth client. Did you wrap your app in <NhostProvider />?')\n  return interpreter\n}\n","import { ErrorPayload } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = (): {\n  isAuthenticated: boolean\n  isLoading: boolean\n  error: ErrorPayload | null\n  isError: boolean\n  connectionAttempts: number\n} => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } }),\n      connectionAttempts: state.context.importTokenAttempts\n    }),\n    (a, b) =>\n      a.isAuthenticated === b.isAuthenticated &&\n      a.isLoading === b.isLoading &&\n      a.connectionAttempts === b.connectionAttempts\n  )\n}\n","import { Fragment, PropsWithChildren, createElement } from 'react'\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedIn />` to control the rendering of components for users. Components inside `<SignedIn />` are only rendered if the user is authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedIn } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedIn>\n *         <h1>Only rendered if the user is authenticated</h1>\n *       </SignedIn>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-in\n * @category Components\n */\n\nexport function SignedIn({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (!isAuthenticated) {\n    return null\n  }\n\n  return createElement(Fragment, null, children)\n}\n","import { Fragment, PropsWithChildren, createElement } from 'react'\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedOut />` to control the rendering of components for users. Components inside `<SignedOut />` are only rendered if the user is not authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedOut } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedOut>\n *         <h1>Only rendered if the user is not authenticated</h1>\n *       </SignedOut>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-out\n * @category Components\n */\n\nexport function SignedOut({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (isAuthenticated) {\n    return null\n  }\n\n  return createElement(Fragment, null, children)\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = (): string | null => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/nhost-js'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = (): boolean => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.getSnapshot().matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useCallback, useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail('new@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions) {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail, valueOptions = options) =>\n      changeEmailPromise(service, valueEmail, valueOptions),\n    [service, options]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionLoadingState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = () => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword) =>\n    changePasswordPromise(service, valuePassword)\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  DisableMfaHandlerResult,\n  disableMfaPromise,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n  disableMfa: (code: string) => Promise<DisableMfaHandlerResult>\n  isDisabling: boolean\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const isDisabling = useSelector(service, (state) => state.matches('disabling'))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n  const totpSecret = useSelector(service, (state) => state.context.secret || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n  const disableMfa = (code: string) => disableMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isDisabling,\n    isError,\n    error,\n    disableMfa,\n    totpSecret\n  }\n}\n","import { JWTClaims } from '@nhost/nhost-js'\nimport { jwtDecode } from 'jwt-decode'\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = (): JWTClaims | null => {\n  const jwt = useAccessToken()\n  return jwt ? jwtDecode<JWTClaims>(jwt) : null\n}\n","import {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { InterpreterFrom } from 'xstate'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      ref\n    )\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","import { JWTHasuraClaims } from '@nhost/nhost-js'\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = (): JWTHasuraClaims | null => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string): string | string[] | null => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useMultipleFilesUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      service\n    )\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import {\n  encodeQueryParameters,\n  Provider,\n  ProviderOptions,\n  rewriteRedirectTo\n} from '@nhost/nhost-js'\nimport { useContext, useEffect, useState } from 'react'\nimport { NhostReactContext } from './provider'\nimport { useAccessToken } from './useAccessToken'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n *\n *  Pass in the `connect` option to connect the user's account to the OAuth provider when different emails are used.\n *\n * ```js\n * const providerLink = useProviderLink({ connect: true });\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions): Record<Provider, string> => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n  const accessToken = useAccessToken()\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      let providerLink = `${nhost.auth.client.backendUrl}/signin/provider/${provider}`\n\n      const connectOptions = options?.connect ? { connect: accessToken } : {}\n\n      return encodeQueryParameters(\n        providerLink,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, {\n          ...options,\n          ...connectOptions\n        } as any)\n      )\n    }\n  })\n}\n","import {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (options) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (valueEmail, valueOptions = options) =>\n    resetPasswordPromise(service, valueEmail, valueOptions)\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (options) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (valueEmail, valueOptions = options) =>\n    sendVerificationEmailPromise(service, valueEmail, valueOptions)\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  SignInMfaTotpHandlerResult,\n  signInMfaTotpPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\nexport interface SendMfaOtpHandler {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHandler\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (email, password) =>\n    signInEmailPasswordPromise(service, email, password)\n\n  const sendMfaOtp: SendMfaOtpHandler = (otp) => signInMfaTotpPromise(service, otp)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n\n  const needsMfaOtp = useSelector(service, (state) => state.context.mfa !== null)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  signInEmailPasswordlessPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult\n  extends ActionLoadingState,\n    ActionSuccessState,\n    ActionErrorState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult {\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail,\n    valueOptions = options\n  ) => signInEmailPasswordlessPromise(service, valueEmail, valueOptions)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { User } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = (): User | null => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import {\n  elevateEmailSecurityKeyPromise,\n  ElevateWithSecurityKeyHandlerResult\n} from '@nhost/nhost-js'\nimport { useEffect, useState } from 'react'\nimport { useHasuraClaims } from './useHasuraClaims'\nimport { useNhostClient } from './useNhostClient'\nimport { useUserData } from './useUserData'\n\ninterface ElevateWithSecurityKeyHandler {\n  (email: string): Promise<ElevateWithSecurityKeyHandlerResult>\n}\n\ninterface ElevateWithSecurityKeyHook {\n  elevateEmailSecurityKey: ElevateWithSecurityKeyHandler\n  elevated: boolean\n}\n\n/**\n * Use the hook `useElevateSecurityKeyEmail` to elevate the user auth permission in order to perform sensitive operations\n *\n * @example\n * ```tsx\n * const { elevateEmailSecurityKey, elevated } = useElevateSecurityKeyEmail()\n *\n * console.log({ elevated });\n *\n * await elevateEmailSecurityKey('joe@example.com')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/elevate-web-authn\n */\nexport const useElevateSecurityKeyEmail = (): ElevateWithSecurityKeyHook => {\n  const user = useUserData()\n  const nhost = useNhostClient()\n  const claims = useHasuraClaims()\n\n  const hasElevatedClaim = user ? claims?.['x-hasura-auth-elevated'] === user?.id : false\n\n  const [elevated, setElevated] = useState(!!hasElevatedClaim)\n\n  const elevateEmailSecurityKey: ElevateWithSecurityKeyHandler = (email: string) =>\n    elevateEmailSecurityKeyPromise(nhost.auth.client, email)\n\n  useEffect(() => {\n    setElevated(!!hasElevatedClaim)\n  }, [hasElevatedClaim])\n\n  return {\n    elevated,\n    elevateEmailSecurityKey\n  }\n}\n","import { SignInPATHandlerResult, SignInPATState, signInPATPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInPATHandler {\n  (pat: string): Promise<SignInPATHandlerResult>\n}\n\nexport interface SignInPATHookResult extends SignInPATState {\n  signInPAT: SignInPATHandler\n}\n\ninterface SignInPATHook {\n  (): SignInPATHookResult\n}\n\n/**\n * Use the hook `useSignInPAT` to sign in a user using a personal access token.\n *\n * @example\n * ```tsx\n * const { signInPAT, isLoading, isSuccess, isError, error } = useSignInPAT()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInPAT('8c5402d1-b05d-4825-a3ae-52d26402b89b')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-pat\n */\nexport const useSignInPAT: SignInPATHook = () => {\n  const service = useAuthInterpreter()\n  const signInPAT: SignInPATHandler = (pat: string) => signInPATPromise(service, pat)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches({ authentication: 'signedIn' }))\n\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInPAT,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  signInSmsPasswordlessOtpPromise,\n  signInSmsPasswordlessPromise,\n  SignInSmsPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useState } from 'react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import {\n  signUpEmailPasswordPromise,\n  SignUpEmailPasswordState,\n  SignUpOptions,\n  RequestOptions\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions,\n    requestOptions?: RequestOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (options) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    email,\n    password,\n    valueOptions = options,\n    requestOptions\n  ) => signUpEmailPasswordPromise(service, email, password, valueOptions, requestOptions)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  RequestOptions,\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (\n    email: string,\n    options?: SignUpSecurityKeyOptions,\n    requestOptions?: RequestOptions\n  ): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKeyEmail` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKeyEmail()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (\n    email,\n    options = hookOptions,\n    requestOptions?: RequestOptions\n  ) => signUpEmailSecurityKeyPromise(service, email, options, requestOptions)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = (): boolean | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = (): string[] => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => {\n    if (!state.matches('authentication.signedIn')) {\n      return []\n    }\n    return state.context.user?.roles || []\n  })\n}\n","import {\n  EmailOTPOptions,\n  SignInEmailOTPHandlerResult,\n  signInEmailOTPPromise,\n  SignInEmailOTPState,\n  VerifyEmailOTPHandlerResult,\n  verifyEmailOTPPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInEmailOTPHandler {\n  (email: string, options?: EmailOTPOptions): Promise<SignInEmailOTPHandlerResult>\n}\n\nexport interface VerifyEmailOTPHandler {\n  (email: string, otp: string): Promise<VerifyEmailOTPHandlerResult>\n}\n\nexport interface SignInEmailOTPHookResult extends SignInEmailOTPState {\n  signInEmailOTP: SignInEmailOTPHandler\n  verifyEmailOTP: VerifyEmailOTPHandler\n}\n\n/**\n * Use the hook `useSignInEmailOTP` to sign in a user with a one-time password sent via email.\n *\n * ## Usage\n *\n * 1. Call the `signInEmailOTP` function with the user's email to send a one-time password (OTP) to that email address.\n * 2. The state `needsOtp` will be `true`, indicating that an OTP is required.\n * 3. Once the user receives the OTP via email, call the `verifyEmailOTP` function with the email and the received OTP.\n * 4. On successful verification, the user is authenticated, and `isSuccess` becomes `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInEmailOTP` and `verifyEmailOTP` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInEmailOTP, verifyEmailOTP, isLoading, isSuccess, isError, error } = useSignInEmailOTP()\n *\n * const signIn = async (e) => {\n *   e.preventDefault();\n *   await signInEmailOTP('john@gmail.com');\n * }\n *\n * const verify = async (e) => {\n *   e.preventDefault();\n *   await verifyEmailOTP('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-otp\n */\nexport function useSignInEmailOTP(options?: EmailOTPOptions): SignInEmailOTPHookResult {\n  const service = useAuthInterpreter()\n\n  const signInEmailOTP: SignInEmailOTPHandler = (email: string, overrideOptions = options) =>\n    signInEmailOTPPromise(service, email, overrideOptions)\n\n  const verifyEmailOTP: VerifyEmailOTPHandler = async (email: string, otp: string) =>\n    verifyEmailOTPPromise(service, email, otp)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.signInEmailOTP') || state.matches('registration.verifyEmailOTP')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailOTP, verifyEmailOTP, isLoading, isSuccess, isError, error, needsOtp }\n}\n","import {\n  SignInIdTokenHandlerResult,\n  SignInIdTokenState,\n  signInIdTokenPromise,\n  Provider\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInIdTokenHandler {\n  (provider: Provider, idToken: string, nonce?: string): Promise<SignInIdTokenHandlerResult>\n}\n\nexport interface SignInIdTokenHookResult extends SignInIdTokenState {\n  signInIdToken: SignInIdTokenHandler\n}\n\ninterface SignInIdTokenHook {\n  (): SignInIdTokenHookResult\n}\n\n/**\n * Use the hook `useSignInIdToken` to sign in a user using an `idToken`.\n *\n * @example\n * ```tsx\n * const { signInIdToken, isLoading, isSuccess, isError, error } = useSignInIdToken()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInIdToken({ provider: 'google', idToken: '...' })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-idtoken\n */\nexport const useSignInIdToken: SignInIdTokenHook = () => {\n  const service = useAuthInterpreter()\n  const signInIdToken: SignInIdTokenHandler = (\n    provider: Provider,\n    idToken: string,\n    nonce?: string\n  ) =>\n    signInIdTokenPromise(service, {\n      provider,\n      idToken,\n      nonce\n    })\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches({ authentication: 'signedIn' }))\n\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'idToken' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInIdToken,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionSuccessState,\n  ErrorPayload,\n  LinkIdTokenHandlerParams,\n  LinkIdTokenHandlerResult,\n  linkIdTokenPromise\n} from '@nhost/nhost-js'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface LinkIdTokenHandler {\n  (params: LinkIdTokenHandlerParams): Promise<LinkIdTokenHandlerResult>\n}\n\nexport interface LinkIdTokenHookResult extends ActionErrorState, ActionSuccessState {\n  linkIdToken: LinkIdTokenHandler\n}\n\ninterface LinkIdTokenHook {\n  (): LinkIdTokenHookResult\n}\n\n/**\n * Use the hook `useLinkIdToken` to link a user account with the provider's account using an id token\n *\n * @example\n * ```tsx\n * const { linkIdToken, isLoading, isSuccess, isError, error } = useLinkIdToken()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await linkIdToken({\n *      provider: 'google',\n *      idToken: '...',\n *      nonce: '...'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-link-id-token\n */\nexport const useLinkIdToken: LinkIdTokenHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n  const [isLoading, setIsLoading] = useState(false)\n\n  const linkIdToken: LinkIdTokenHandler = async ({\n    provider,\n    idToken,\n    nonce\n  }: LinkIdTokenHandlerParams) => {\n    setIsLoading(true)\n\n    const result = await linkIdTokenPromise(nhost.auth.client, {\n      provider,\n      idToken,\n      ...(nonce && { nonce })\n    })\n\n    const { error } = result\n\n    if (error) {\n      setError(error)\n    }\n\n    setIsLoading(false)\n\n    return result\n  }\n\n  return { linkIdToken, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInSecurityKeyPromise,\n  SignInSecurityKeyHandlerResult,\n  SignInSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyHandler {\n  (): Promise<SignInSecurityKeyHandlerResult>\n}\n\nexport interface SignInSecurityKeyHookResult extends SignInSecurityKeyState {\n  signInSecurityKey: SignInSecurityKeyHandler\n}\n\ninterface SignInSecurityKeyHook {\n  (): SignInSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignInSecurityKey` to sign in a user with a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInSecurityKey()\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-security-key\n */\nexport const useSignInSecurityKey: SignInSecurityKeyHook = () => {\n  const service = useAuthInterpreter()\n\n  const signInSecurityKey: SignInSecurityKeyHandler = () => signInSecurityKeyPromise(service)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInSecurityKey,\n    user\n  }\n}\n"],"names":["VanillaNhostClient","_VanillaNhostClient","NhostClient","params","NhostReactContext","createContext","NhostProvider","nhost","initial","props","interpreter","useInterpret","isInitialMount","useRef","useEffect","NhostReactProvider","useAuthInterpreter","_a","useContext","useAuthenticationStatus","service","useSelector","state","a","b","SignedIn","children","isAuthenticated","createElement","Fragment","SignedOut","useAccessToken","useNhostClient","useAddSecurityKey","error","setError","useState","isSuccess","isError","isLoading","setIsLoading","nickname","result","addSecurityKeyPromise","useAuthenticated","setIsAuthenticated","newValue","useChangeEmail","options","machine","useMemo","createChangeEmailMachine","needsEmailVerification","useCallback","valueEmail","valueOptions","changeEmailPromise","useChangePassword","createChangePasswordMachine","valuePassword","changePasswordPromise","useConfigMfa","createEnableMfaMachine","isGenerating","isGenerated","isActivating","isActivated","isDisabling","qrCodeDataUrl","totpSecret","generateQrCodePromise","code","activateMfaPromise","disableMfaPromise","useDecodedAccessToken","jwt","jwtDecode","useFileUploadItem","ref","add","bucketId","upload","uploadFilePromise","cancel","destroy","isUploading","isUploaded","progress","id","name","useFileUpload","createFileUploadMachine","useHasuraClaims","claims","useHasuraClaim","hasuraClaims","useMultipleFilesUpload","errors","setErrors","createMultipleFilesUploadMachine","uploadMultipleFilesPromise","clear","files","useProviderLink","isSSR","setIsSSR","accessToken","_","provider","providerLink","connectOptions","encodeQueryParameters","rewriteRedirectTo","useResetPassword","createResetPasswordMachine","isSent","resetPasswordPromise","useSendVerificationEmail","createSendVerificationEmailMachine","sendVerificationEmailPromise","useSignInAnonymous","signInAnonymous","signInAnonymousPromise","user","useSignInEmailPassword","signInEmailPassword","email","password","signInEmailPasswordPromise","sendMfaOtp","otp","signInMfaTotpPromise","refreshToken","needsMfaOtp","mfa","useSignInEmailPasswordless","signInEmailPasswordless","signInEmailPasswordlessPromise","useSignInEmailSecurityKey","signInEmailSecurityKey","signInEmailSecurityKeyPromise","useUserData","useElevateSecurityKeyEmail","hasElevatedClaim","elevated","setElevated","elevateEmailSecurityKey","elevateEmailSecurityKeyPromise","useSignInPAT","signInPAT","pat","signInPATPromise","useSignInSmsPasswordless","stateOptions","_phoneNumber","setPhoneNumber","signInSmsPasswordless","phoneNumber","signInSmsPasswordlessPromise","sendOtp","args","signInSmsPasswordlessOtpPromise","needsOtp","useSignOut","stateAll","signOut","valueAll","signOutPromise","useSignUpEmailPassword","signUpEmailPassword","requestOptions","signUpEmailPasswordPromise","useSignUpEmailSecurityKeyEmail","hookOptions","signUpEmailSecurityKey","signUpEmailSecurityKeyPromise","useUserAvatarUrl","useUserDefaultRole","useUserDisplayName","useUserEmail","useUserId","useUserIsAnonymous","useUserLocale","useUserRoles","useSignInEmailOTP","signInEmailOTP","overrideOptions","signInEmailOTPPromise","verifyEmailOTP","verifyEmailOTPPromise","useSignInIdToken","signInIdToken","idToken","nonce","signInIdTokenPromise","useLinkIdToken","linkIdTokenPromise","useSignInSecurityKey","signInSecurityKey","signInSecurityKeyPromise"],"mappings":"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"}