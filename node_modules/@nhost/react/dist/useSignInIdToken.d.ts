import { SignInIdTokenHandlerResult, SignInIdTokenState, Provider } from '@nhost/nhost-js';

interface SignInIdTokenHandler {
    (provider: Provider, idToken: string, nonce?: string): Promise<SignInIdTokenHandlerResult>;
}
export interface SignInIdTokenHookResult extends SignInIdTokenState {
    signInIdToken: SignInIdTokenHandler;
}
interface SignInIdTokenHook {
    (): SignInIdTokenHookResult;
}
/**
 * Use the hook `useSignInIdToken` to sign in a user using an `idToken`.
 *
 * @example
 * ```tsx
 * const { signInIdToken, isLoading, isSuccess, isError, error } = useSignInIdToken()
 *
 * console.log({ isLoading, isSuccess, isError, error });
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signInIdToken({ provider: 'google', idToken: '...' })
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/react/use-sign-in-idtoken
 */
export declare const useSignInIdToken: SignInIdTokenHook;
export {};
//# sourceMappingURL=useSignInIdToken.d.ts.map